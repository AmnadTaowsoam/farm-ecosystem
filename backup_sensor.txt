#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <math.h>

// กำหนดค่า WiFi
const char* ssid = "TP-Link_61E3_2.4";
const char* password = "0800453956";

// MQTT Broker Settings (Edge Server)
const char* mqtt_server = "192.168.1.103";  // IP ของ Edge Server จริง
const int mqtt_port = 1883;
const char* mqtt_user = "admin";       // user ที่ตั้งใน broker
const char* mqtt_password = "admin1234";   // password ที่ตั้งใน broker

const char* mqtt_topic = "sensor/temperature"; // topic สำหรับส่งข้อมูล

const int sensorPin = A0;

// ตัวต้านทานคงที่ในวงจร (Ohms)
const float R_FIXED = 100000.0;  // 100kΩ ตามตัวต้านทาน W104

// Steinhart-Hart coefficients สำหรับ NTC (ประมาณ)
const float BETA = 3700.0;     // ค่าประมาณของ Beta coefficient
const float T0 = 298.15;       // 25°C in Kelvin
const float R0 = 280000.0;     // ความต้านทานที่ 25°C

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastReadTime = 0;
const unsigned long readInterval = 10000; // 30 วินาที

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "WemosD1Mini-";
    clientId += String(random(0xffff), HEX);

    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

float readTemperatureC() {
  int adcValue = analogRead(sensorPin);
  float voltage = adcValue * (3.3 / 1023.0);

  if (voltage < 0.01) return -999.0;  // ป้องกันหารด้วย 0

  float resistance = R_FIXED * ((1.0 / voltage) - 1.0);

  // Beta formula
  float tempK = 1.0 / ( (1.0 / T0) + (1.0 / BETA) * log(resistance / R0) );
  float tempC = tempK - 273.15;

  Serial.print("ADC: "); Serial.print(adcValue);
  Serial.print(", Voltage: "); Serial.print(voltage);
  Serial.print(", Resistance: "); Serial.print(resistance);
  Serial.print(", Temp C: "); Serial.println(tempC);

  return tempC;
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  Serial.println("Setup done");
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastReadTime > readInterval) {
    lastReadTime = now;

    float temperatureC = readTemperatureC();

    Serial.print("Temperature: ");
    if (temperatureC > -100) {
      Serial.print(temperatureC);
      Serial.println(" °C");
    } else {
      Serial.println("Invalid");
    }

    char msg[50];
    if (temperatureC > -100) {
      snprintf(msg, 50, "%.2f", temperatureC);
    } else {
      snprintf(msg, 50, "NaN");
    }

    if (client.publish(mqtt_topic, msg)) {
      Serial.println("MQTT message sent successfully");
    } else {
      Serial.println("MQTT message failed to send");
    }
  }
}


------------------------------------------
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <math.h>

// ==== กำหนด ID ของอุปกรณ์ (ต้องตรงกับ device_id ใน DB) ====
#define DEVICE_ID 42

// กำหนดค่า WiFi
const char* ssid     = "TP-Link_61E3_2.4";
const char* password = "0800453956";

// MQTT Broker Settings (Edge Server)
const char* mqtt_server   = "192.168.1.104";
const int   mqtt_port     = 1883;
const char* mqtt_user     = "admin";
const char* mqtt_password = "admin1234";

// sensor pin และวงจร NTC
const int sensorPin = A0;
const float R_FIXED = 100000.0;  // 100kΩ
const float BETA    = 3700.0;
const float T0      = 298.15;    // 25°C in Kelvin
const float R0      = 280000.0;  // resistance at 25°C

WiFiClient    espClient;
PubSubClient  client(espClient);

unsigned long lastReadTime    = 0;
const unsigned long interval  = 10000;  // 10 วินาที

void setup_wifi() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected, IP: " + WiFi.localIP().toString());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "sensor-client-";
    clientId += DEVICE_ID;
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" retry in 5s");
      delay(5000);
    }
  }
}

float readTemperatureC() {
  int adc = analogRead(sensorPin);
  float voltage = adc * (3.3 / 1023.0);
  if (voltage < 0.01) return NAN;

  float resistance = R_FIXED * ((1.0 / voltage) - 1.0);
  float tempK = 1.0 / ((1.0 / T0) + (1.0 / BETA) * log(resistance / R0));
  return tempK - 273.15;
}

void setup() {
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) reconnect();
  client.loop();

  unsigned long now = millis();
  if (now - lastReadTime < interval) return;
  lastReadTime = now;

  float tempC = readTemperatureC();
  if (isnan(tempC)) {
    Serial.println("Sensor read error");
    return;
  }

  // สร้าง topic เป็น "sensor/{deviceId}/data"
  char topic[32];
  snprintf(topic, sizeof(topic), "sensor/%d/data", DEVICE_ID);

  // สร้าง payload JSON: {"metric":"temperature","value":23.45}
  char payload[64];
  snprintf(payload, sizeof(payload),
           "{\"metric\":\"temperature\",\"value\":%.2f}", tempC);

  // ส่ง MQTT
  if (client.publish(topic, payload)) {
    Serial.printf("Published to %s: %s\n", topic, payload);
  } else {
    Serial.println("Publish failed");
  }
}
